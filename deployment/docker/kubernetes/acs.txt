# If creating the service principal manually see:
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-create-service-principal-portal

# Create SSH keys to use
# Use the github public key

# Create a new k8s cluster
az acs create -n dockercoins-cluster -g dockercoins -d rmc-dockercoins --orchestrator-type kubernetes

# NOTE: In the future the project should use the azure redis cache

# Install kubectl
az acs kubernetes install-cli

# Get k8s credentials
az acs kubernetes get-credentials --dns-prefix=rmc-dockercoins --location=westeurope --user azureuser
# If the above fails on windows. So use WinSCP to copy the files
#pscp azureuser@MASTERFQDN:.kube/config .
#  SET KUBECONFIG=%CD%\config
#  kubectl get nodes

# To create a config map of the certs
kubectl create configmap certs-config --from-file=./certs
kubectl get configmaps certs-config -o yaml > certs_config.yaml
# If already created import
kubectl create -f certs_config.yaml

# Create the RNG & Hasher deployments and services
kubectl create -f rng-deployment.yaml
kubectl create -f hasher-deployment.yaml
kubectl create -f rng-service.yaml
kubectl create -f hasher-service.yaml

# Create the Redis deployment and service
# NOTE: This would use a PaaS offering like Azure Cache ideally
kubectl create -f redis-deployment.yaml
kubectl create -f redis-service.yaml

# Create the worker deployment
kubectl create -f worker-deployment.yaml

# Create the webui deployment and service
kubectl create -f webui-deployment.yaml
kubectl create -f webui-service.yaml

# Start the local proxy
kubectl proxy
# Then open browser to http://127.0.0.1:8001/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard/#/workload?namespace=default

# Scale the worker deployment
kubectl scale --replicas=2 deployment/worker