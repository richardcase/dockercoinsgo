# If creating the service principal manually see:
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-create-service-principal-portal

# Create SSH keys to use
# Use the github public key

# Create a new k8s cluster
az acs create -n dockercoins-cluster -g dockercoins -d rmc-dockercoins --orchestrator-type kubernetes

# Create Redis cache using portal with name:  rmc-dockercoins.redis.cache.windows.net

# Install kubectl
az acs kubernetes install-cli

# Get k8s credentials
az acs kubernetes get-credentials --dns-prefix=rmc-dockercoins --location=westeurope --user azureuser
# If the above fails on windows. So use WinSCP to copy the files
#pscp azureuser@MASTERFQDN:.kube/config .
#  SET KUBECONFIG=%CD%\config
#  kubectl get nodes

# Create a namespace for the app
kubectl create -f namespace.yaml

# Set the default namespace for the following kubectl commands
# Could also use --namespace or the CONTEXT env var
kubectl config set-context rmc-dockercoins --namespace=dockercoins-dev

# To create a config map of the certs
#kubectl create configmap certs-config --from-file=./certs
#kubectl get configmaps certs-config -o yaml > certs_config.yaml
# If already created import
kubectl create -f certs_config.yaml

# Create the RNG & Hasher deployments and services
kubectl create -f rng-deployment.yaml
kubectl create -f hasher-deployment.yaml
kubectl create -f rng-service.yaml
kubectl create -f hasher-service.yaml

# Create the Redis config and secrets
# NOTE: Update the password in cache_secrets.yaml first
#kubectl create secret generic cache-secrets --from-literal=password=*****REDISPASSWORD"
#kubectl get secret cache-secrets -o yaml > cache_secrets.yaml
kubectl create -f cache_config.yaml
kubectl create -f cache_secrets.yaml

# Create the worker deployment
kubectl create -f worker-deployment.yaml

# Create the webui deployment and service
kubectl create -f webui-deployment.yaml
kubectl create -f webui-service.yaml

# Start the local proxy
kubectl proxy
# Then open browser to http://127.0.0.1:8001/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard/#/workload?namespace=default

# Scale the worker deployment
kubectl scale --replicas=2 deployment/worker